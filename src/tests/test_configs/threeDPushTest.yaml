modelFile: "/src/tests/test_xml/Franka_and_cuboid.xml"
modelName: "/3D_push"
timeStep: 0.004
keypointMethod: "set_interval"   # Possible values: "set_interval", "adaptive_jerk", "adaptive_accel", "iterative_error, "velocity_change"
auto_adjust: false
minN: 1
maxN: 20
iterativeErrorThreshold: 0.00001
robots:
  panda:
    jointNames: ["panda0_joint1", "panda0_joint2", "panda0_joint3", "panda0_joint4", "panda0_joint5", "panda0_joint6", "panda0_joint7", "panda0_finger_joint1", "panda0_finger_joint2"]
    actuatorNames: ["panda0_joint1", "panda0_joint2", "panda0_joint3", "panda0_joint4", "panda0_joint5", "panda0_joint6", "panda0_joint7"]
    torqueControl: true 
    torqueLimits: [87, 87, 87, 87, 12, 12, 12]
    startPos: [0, -0.183, 0, -3.1, 0, 1.34, 0, 0, 0]
    goalPos: [ 0, 0, 0, 0, 0, 0, 0, 0, 0]
    jointPosCosts: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    jointVelCosts: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    terminalJointPosCosts: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    terminalJointVelCosts: [0, 0, 0, 0, 0, 0, 0, 0, 0]
    jointControlCosts: [0, 0, 0, 0, 0, 0, 0]
    jointJerkThresholds: [0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0.002, 0, 0]
    magVelThresholds: [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0, 0]
bodies:
  goal:
    activeLinearDOF: [true, true, true]
    activeAngularDOF: [true, true, true]
    startLinearPos: [ 0.5, 0.1, 0.0 ]
    startAngularPos: [ 0, 0, 0 ]
    goalLinearPos: [ 0.7, 0, 0.0 ]
    goalAngularPos: [ 0, 0, 0 ]
    linearPosCost: [1, 1, 0]
    # When iLQR once
    terminalLinearPosCost: [0, 0, 0]
    linearVelCost: [0.5, 0.5, 0]
    terminalLinearVelCost: [0, 0, 0]
    angularPosCost: [0, 0, 0]
    terminalAngularPosCost: [0, 0, 0]
    angularVelCost: [0, 0, 0]
    terminalAngularVelCost: [0, 0, 0]
    linearJerkThreshold: [ 0.0005, 0.0005, 0.0005 ]
    angularJerkThreshold: [ 0.003, 0.003, 0.003 ]
    linearMagVelThreshold: [ 0.1, 0.1, 0.1 ]
    angularMagVelThreshold: [ 0.1, 0.1, 0.1 ]
  obstacle_1:
    activeLinearDOF: [ true, true, true ]
    activeAngularDOF: [ true, true, true ]
    startLinearPos: [ 0.6, 0.1, 0.0 ]
    startAngularPos: [ 0, 0, 0 ]
    goalLinearPos: [ 0.7, 0, 0.0 ]
    goalAngularPos: [ 0, 0, 0 ]
    linearPosCost: [ 0, 0, 0 ]
    # When iLQR once
    terminalLinearPosCost: [ 0, 0, 0 ]
    linearVelCost: [ 0, 0, 0 ]
    terminalLinearVelCost: [ 0, 0, 0 ]
    angularPosCost: [ 0, 0, 0 ]
    terminalAngularPosCost: [ 0, 0, 0 ]
    angularVelCost: [ 0, 0, 0 ]
    terminalAngularVelCost: [ 0, 0, 0 ]
    linearJerkThreshold: [ 0.0005, 0.0005, 0.0005 ]
    angularJerkThreshold: [ 0.003, 0.003, 0.003 ]
    linearMagVelThreshold: [ 0.1, 0.1, 0.1 ]
    angularMagVelThreshold: [ 0.1, 0.1, 0.1 ]
  obstacle_2:
    activeLinearDOF: [ true, true, true ]
    activeAngularDOF: [ true, true, true ]
    startLinearPos: [ 0.6, 0.2, 0.0 ]
    startAngularPos: [ 0, 0, 0 ]
    goalLinearPos: [ 0.7, 0, 0.0 ]
    goalAngularPos: [ 0, 0, 0 ]
    linearPosCost: [ 0, 0, 0 ]
    # When iLQR once
    terminalLinearPosCost: [ 0, 0, 0 ]
    linearVelCost: [ 0, 0, 0 ]
    terminalLinearVelCost: [ 0, 0, 0 ]
    angularPosCost: [ 0, 0, 0 ]
    terminalAngularPosCost: [ 0, 0, 0 ]
    angularVelCost: [ 0, 0, 0 ]
    terminalAngularVelCost: [ 0, 0, 0 ]
    linearJerkThreshold: [ 0.0005, 0.0005, 0.0005 ]
    angularJerkThreshold: [ 0.003, 0.003, 0.003 ]
    linearMagVelThreshold: [ 0.1, 0.1, 0.1 ]
    angularMagVelThreshold: [ 0.1, 0.1, 0.1 ]